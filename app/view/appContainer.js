/*
 * File: app/view/appContainer.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.appContainer', {
    extend: 'Ext.Container',
    alias: 'widget.appContainer',

    config: {
        id: 'appContainer',
        itemId: 'appContainer',
        layout: {
            type: 'fit'
        },
        showAnimation: {
            type: 'pop'
        },
        listeners: [
            {
                fn: 'onContainerInitialize',
                event: 'initialize'
            },
            {
                fn: 'onMenuBtnTap',
                event: 'tap',
                delegate: '#menuBtn'
            }
        ],
        items: [
            {
                xtype: 'button',
                bottom: '5%',
                cls: 'generalBtn',
                height: '13%',
                id: 'menuBtn',
                itemId: 'menuBtn',
                right: '5%',
                ui: 'action-round',
                width: '20%',
                icon: 'assets/icons/Menu.png',
                iconAlign: 'center',
                iconCls: 'generalIcon',
                text: ''
            }
        ]
    },

    onContainerInitialize: function(component, options) {
        MyApp.popUpsOnScreen = [];
        MyApp.inAnotherScreen = false;
        MyApp.lastUpdate = new Date();
        MyApp.inUpdate = true;

        component.defineFunctions();

        var mapContainer = Ext.widget('mapContainer');
        this.add(mapContainer);
        mapContainer.show();


    },

    onMenuBtnTap: function(button, e, options) {
        this.showPopUp(button);
    },

    showPopUp: function(button) {
        var container = Ext.getCmp('appContainer');
        var popUp = null;


        if(Ext.getCmp("menuPopUp") === undefined || Ext.getCmp("menuPopUp") === null){
            popUp = Ext.widget('popUp');
        }else{   
            popUp = Ext.getCmp("menuPopUp");
        }

        Ext.Viewport.add(popUp);

        //container.insert(0,popUp);

        popUp.showBy(button);

    },

    defineFunctions: function() {
        MyApp.removePopUpFromScreen = function(couponID){

            for(var i = 0; i < MyApp.popUpsOnScreen.length;i++){

                if(MyApp.popUpsOnScreen[i] == couponID){
                    MyApp.popUpsOnScreen.splice(i,1);
                    i = MyApp.popUpsOnScreen.length + 1;
                }  
            }

        };

        MyApp.canAddPopUp = function(couponID){

            var encontrado = false;
            var canAdd = false;


            for(var i = 0; i < MyApp.popUpsOnScreen.length;i++){

                if(MyApp.popUpsOnScreen[i] == couponID){
                    encontrado = true;
                    i = MyApp.popUpsOnScreen.length + 1;
                }  
            }

            if(!encontrado && !MyApp.inAnotherScreen){

                MyApp.popUpsOnScreen.push(couponID);
                canAdd = true;

            }

            return canAdd;
        };

        MyApp.maskComponent = function(component,mensaje){
            component.setMasked({xtype: 'loadmask', message: mensaje});   
        };

        MyApp.unMaskComponent = function(component){
            component.setMasked(false);   
        };

    }

});