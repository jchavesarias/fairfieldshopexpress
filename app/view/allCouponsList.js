/*
 * File: app/view/allCouponsList.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.allCouponsList', {
    extend: 'Ext.Panel',
    alias: 'widget.allCouponsList',

    config: {
        height: '100%',
        id: 'allCouponsListView',
        itemId: 'allCouponsListView',
        left: 0,
        top: 0,
        width: '100%',
        layout: {
            type: 'vbox'
        },
        modal: true,
        cls: [
            'generalModal'
        ],
        hideAnimation: {
            type: 'slideOut',
            direction: 'right'
        },
        showAnimation: {
            type: 'slide'
        },
        items: [
            {
                xtype: 'toolbar',
                cls: [
                    'toolbarWithText'
                ],
                docked: 'top',
                title: 'Catalog',
                items: [
                    {
                        xtype: 'button',
                        cls: 'generalBtn backBtn',
                        height: '',
                        itemId: 'backBtnCatalog',
                        ui: 'action-round',
                        icon: 'assets/icons/backIcon.png',
                        iconCls: 'backIcon',
                        text: ''
                    }
                ]
            },
            {
                xtype: 'container',
                height: '50px',
                padding: '7px',
                items: [
                    {
                        xtype: 'searchfield',
                        cls: [
                            'customSearchField'
                        ],
                        itemId: 'mysearchfield',
                        width: '100%',
                        inputCls: 'searchInput',
                        placeHolder: 'Search...'
                    }
                ]
            },
            {
                xtype: 'list',
                flex: 1,
                id: 'allCouponList',
                itemId: 'allCouponList',
                itemCls: 'itemList',
                itemTpl: [
                    '<div class=\'itemContainerList\'>',
                    '    <div class=\'imageContainerList\'><img src="{image}"/></div>',
                    '    <p class=\'titleList\'>{name}</p>',
                    '    <p class=\'descriptionList\'>{shortDiscount}...</p>',
                    '</div>    '
                ],
                store: 'allCoupons',
                disableSelection: false,
                grouped: true,
                onItemDisclosure: false
            }
        ],
        listeners: [
            {
                fn: 'onMybutton12Tap',
                event: 'tap',
                delegate: '#backBtnCatalog'
            },
            {
                fn: 'onMysearchfieldKeyup',
                event: 'keyup',
                delegate: '#mysearchfield'
            },
            {
                fn: 'onMysearchfieldClearicontap',
                event: 'clearicontap',
                delegate: '#mysearchfield'
            },
            {
                fn: 'onAllCouponListItemTap',
                event: 'itemtap',
                delegate: '#allCouponList'
            },
            {
                fn: 'onPanelHide',
                event: 'hide'
            }
        ]
    },

    onMybutton12Tap: function(button, e, options) {
        this.hide();
        MyApp.inAnotherScreen = false;
    },

    onMysearchfieldKeyup: function(textfield, e, options) {
        //get the store and the value of the field
        var value = textfield.getValue(),
            store = Ext.getStore("allCoupons");

        //first clear any current filters on thes tore
        store.clearFilter();

        //check if a value is set first, as if it isnt we dont have to do anything
        if (value) {
            //the user could have entered spaces, so we must split them so we can loop through them all
            var searches = value.split(' '),
                regexps = [],
                i;

            //loop them all
            for (i = 0; i < searches.length; i++) {
                //if it is nothing, continue
                if (!searches[i]) continue;

                //if found, create a new regular expression which is case insenstive
                regexps.push(new RegExp(searches[i], 'i'));
            }

            //now filter the store by passing a method
            //the passed method will be called for each record in the store
            store.filter(function(record) {
                var matched = [];

                //loop through each of the regular expressions
                for (i = 0; i < regexps.length; i++) {
                    var search = regexps[i],
                        didMatch = record.get('name').match(search);

                    //if it matched the first or last name, push it into the matches array
                    matched.push(didMatch);
                }

                //if nothing was found, return false (dont so in the store)
                if (regexps.length > 1 && matched.indexOf(false) != -1) {
                    return false;
                } else {
                    //else true true (show in the store)
                    return matched[0];
                }
            });
        }
    },

    onMysearchfieldClearicontap: function(text, e, options) {
        //call the clearFilter method on the store instance
        Ext.getStore("allCoupons").clearFilter();
    },

    onAllCouponListItemTap: function(dataview, index, target, record, e, options) {
        if(e.target.className === 'redeem' ){

            MyApp.printCoupon(record.data.couponID,function(result,printedCoupon){           

                if(result == 1){
                    dataview.getParent().addPrintedDetail(printedCoupon);            
                }

            });

        }else if(e.target.className === 'delete'){
            //var store = Ext.getStore("couponList");
            //store.remove(record);
        }else{
            dataview.getParent().addCouponDetail(record); 
        }
    },

    onPanelHide: function(component, options) {
        Ext.getCmp("appContainer").remove(component);
        component.destroy();
    },

    addPrintedDetail: function(data) {
        var printedDetail = Ext.widget("printedCouponDetail");

        Ext.getCmp("appContainer").add(printedDetail);  

        printedDetail.from = "coupons";

        printedDetail.setData(data);

        printedDetail.show();
    },

    addCouponDetail: function(data) {
        var appContainer = Ext.getCmp("appContainer");

        var couponDetail = appContainer.getComponent("couponDetailView");

        if(couponDetail === undefined){
            console.log("detail no existe");
            couponDetail = Ext.create("MyApp.view.couponDetailView");
        }else{
            couponDetail.hide();
            appContainer.remove(couponDetail);
            couponDetail.destroy();
            couponDetail = Ext.create("MyApp.view.couponDetailView");
        }

        //Hack to not show the delete button
        couponDetail.fromAll = true;

        appContainer.add(couponDetail);  

        couponDetail.setData(data.data);

        couponDetail.show();

    }

});