/*
 * File: app/view/settingsView.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.settingsView', {
    extend: 'Ext.Panel',
    alias: 'widget.settingsView',

    config: {
        height: '100%',
        html: '<div class="descriptionSettings">Specify the perimeter in which you would like the coupons to be displayed</div>',
        id: 'settingsView',
        itemId: 'settingsView',
        left: 0,
        styleHtmlContent: true,
        top: 0,
        width: '100%',
        layout: {
            type: 'vbox'
        },
        modal: true,
        scrollable: false,
        cls: [
            'generalModal',
            'blueBackground'
        ],
        hideAnimation: {
            type: 'slideOut',
            direction: 'right'
        },
        showAnimation: {
            type: 'slide'
        },
        listeners: [
            {
                fn: 'onPanelHide',
                event: 'hide'
            },
            {
                fn: 'onMybutton13Tap',
                event: 'tap',
                delegate: '#mybutton13'
            },
            {
                fn: 'onSettingsDistanceListItemTap',
                event: 'itemtap',
                delegate: '#settingsDistanceList'
            },
            {
                fn: 'onSettingsListItemTap',
                event: 'itemtap',
                delegate: '#settingsList'
            }
        ],
        items: [
            {
                xtype: 'toolbar',
                docked: 'top',
                title: 'Settings',
                items: [
                    {
                        xtype: 'button',
                        cls: 'generalBtn backBtn',
                        itemId: 'mybutton13',
                        ui: 'action-round',
                        icon: 'assets/icons/backIcon.png',
                        iconCls: 'backIcon',
                        text: ''
                    }
                ]
            },
            {
                xtype: 'list',
                flex: 1,
                height: '50%',
                id: 'settingsDistanceList',
                itemId: 'settingsDistanceList',
                style: 'position : absolute;',
                top: '15%',
                ui: 'round',
                width: '100%',
                modal: false,
                itemTpl: [
                    '<div>{name}</div>'
                ],
                store: 'distanceStore',
                listeners: [
                    {
                        fn: function(component, options) {
                            var store = Ext.getStore('distanceStore');
                            store.load({
                                scope : this,
                                callback : function(records){

                                    for(var i = 0; i < records.length; i ++){                        

                                        if(window.localStorage.getItem("distanceSelection") == records[i].get("value")){
                                            component.select(i);
                                        }
                                    }

                                }

                            }); 

                        },
                        event: 'painted'
                    }
                ]
            },
            {
                xtype: 'list',
                flex: 1,
                height: '30%',
                id: 'settingsList',
                itemId: 'settingsList',
                style: 'position : absolute',
                top: '65%',
                ui: 'round',
                width: '100%',
                itemTpl: [
                    '<div>{value}</div>'
                ],
                store: 'settingsStore'
            }
        ]
    },

    onPanelHide: function(component, options) {
        Ext.getCmp("appContainer").remove(component);
        component.destroy();
    },

    onMybutton13Tap: function(button, e, options) {
        this.hide();
        MyApp.inAnotherScreen = false;
    },

    onSettingsDistanceListItemTap: function(dataview, index, target, record, e, options) {
        window.localStorage.setItem("distanceSelection",record.get("value"));

        MyApp.diametro_circulo = record.get("value") / MyApp.convertion;

        console.log("diametro " + MyApp.diametro_circulo);

        MyApp.circle.setRadius(MyApp.diametro_circulo);

        MyApp.globalBounds.setRadius(MyApp.diametro_circulo + 2000);
    },

    onSettingsListItemTap: function(dataview, index, target, record, e, options) {
        if(record.get("action") === "helpAction"){

            var container = Ext.getCmp('appContainer');

            var instructions = container.getComponent("instructionsView");

            if(instructions === undefined){
                console.log("instructions no existe");
                instructions = Ext.create('MyApp.view.instructionsView');
            }else{
                console.log("instructions existe");
                instructions.hide();
                container.remove(instructions);
                instructions.destroy();
                instructions = Ext.create('MyApp.view.instructionsView');
            }

            container.add(instructions);
            instructions.show();

        }else if(record.get("action") === "logoutAction"){

            MyApp.userId = null;

            //window.localStorage.clear();

            window.localStorage.removeItem("userId");
            window.localStorage.removeItem("finNumber");


            var popUp = Ext.getCmp("menuPopUp");


            var loginContainer = Ext.create('MyApp.view.loginForm');

            loginContainer.setShowAnimation({type : 'fade'});

            Ext.Viewport.add(loginContainer);
            loginContainer.show();

            if(popUp !== null){
                popUp.hide();
                popUp.destroy();
            }

            Ext.getCmp("appContainer").hide();
            Ext.getCmp("appContainer").destroy();

            MyApp.inAnotherScreen = false;

        }
    }

});